import React = require('react');
import ReactNative = require('react-native');
import { FocusableProps } from './focusable';
declare type FocusablePropTypes<P> = P & FocusableProps;
export declare function withFocusable<P>(Component: React.ComponentClass<P> | React.FunctionComponent<P>): React.ComponentClass<FocusablePropTypes<P>, any>;
export declare const Pressable: React.ComponentClass<FocusablePropTypes<ReactNative.PressableProps & React.RefAttributes<ReactNative.View>>, any>;
export interface PressableProps extends FocusablePropTypes<ReactNative.PressableProps> {
}
export declare const TouchableHighlight: React.ComponentClass<FocusablePropTypes<ReactNative.TouchableHighlightProps>, any>;
export interface TouchableHighlightProps extends FocusablePropTypes<ReactNative.TouchableHighlightProps> {
}
export declare const TouchableOpacity: React.ComponentClass<FocusablePropTypes<ReactNative.TouchableOpacityProps>, any>;
export interface TouchableOpacityProps extends FocusablePropTypes<ReactNative.TouchableOpacityProps> {
}
export declare const TouchableNativeFeedback: React.ComponentClass<FocusablePropTypes<ReactNative.TouchableNativeFeedbackProps>, any>;
export interface TouchableNativeFeedbackProps extends FocusablePropTypes<ReactNative.TouchableNativeFeedbackProps> {
}
export declare const TouchableWithoutFeedback: React.ComponentClass<FocusablePropTypes<ReactNative.TouchableWithoutFeedbackProps>, any>;
export interface TouchableWithoutFeedbackProps extends FocusablePropTypes<ReactNative.TouchableWithoutFeedbackProps> {
}
export declare const Button: React.ComponentClass<FocusablePropTypes<ReactNative.ButtonProps>, any>;
export interface ButtonProps extends FocusablePropTypes<ReactNative.ButtonProps> {
}
export {};
